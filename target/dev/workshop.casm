[ap + 0] = 0, ap++;
[ap + 0] = 223925651276572801467025322450506123433664924558092583619131301620304795732, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -6] + 0];
[fp + -7] = [[fp + -6] + 1];
[ap + -3] = [[fp + -6] + 2];
[ap + -2] = [[fp + -6] + 3];
[fp + -5] = [[fp + -6] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6]) %}
[ap + 0] = [[fp + -6] + 6], ap++;
jmp rel 55 if [ap + -1] != 0;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1726174191690532102239220134128269510058468368915684357012677746433971404949, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -6] + 7];
[ap + -4] = [[fp + -6] + 8];
[ap + -3] = [[fp + -6] + 9];
[ap + -2] = [[fp + -6] + 10];
[fp + -4] = [[fp + -6] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -6] + 7) %}
[ap + 0] = [[fp + -6] + 13], ap++;
jmp rel 29 if [ap + -1] != 0;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
[ap + 0] = [fp + -6] + 14, ap++;
[ap + 0] = [fp + -3], ap++;
call rel 665;
jmp rel 12 if [ap + -3] != 0;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 55;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [[fp + -6] + 12], ap++;
[ap + 0] = [fp + -6] + 16, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 14], ap++;
[ap + 0] = [[fp + -6] + 15], ap++;
ret;
ap += 60;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [[fp + -6] + 5], ap++;
[ap + 0] = [fp + -6] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -6] + 7], ap++;
[ap + 0] = [[fp + -6] + 8], ap++;
ret;
ret;
%{ memory[ap + 0] = 6430 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768205026, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 336;
[fp + -6] = [ap + 0] + 6430, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
jmp rel 8;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 293 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = (memory[ap + -1] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -2] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -11] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -13] + 1], ap++;
[ap + -5] = [[ap + -14] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 272 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -2] = [[ap + -8] + 0];
[ap + 0] = [ap + -2] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + -7] = [ap + 0] + [ap + -8], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -9] + 1, ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -12] + 0], ap++;
jmp rel 8;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 226 if [ap + -2] != 0;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -12] + 2];
jmp rel 208;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -11] + 2];
[ap + 0] = [ap + -11] + 3, ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [[ap + -14] + 0], ap++;
jmp rel 8;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 160 if [ap + -2] != 0;
%{ memory[ap + 4] = memory[ap + -1] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -10] + 0], ap++;
[ap + -4] = [[ap + -11] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -12] + 2];
jmp rel 142;
%{
(value, scalar) = (memory[ap + -2], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -9] + 0], ap++;
[ap + -3] = [[ap + -10] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -11] + 2];
[ap + 0] = [ap + -11] + 3, ap++;
[ap + -9] = [ap + 0] + [ap + -10], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 16;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 2529;
[ap + 0] = [ap + -1] + 2528, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 71210 <= memory[ap + -38] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -39] = [ap + 0] + 71210, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 84;
[ap + -39] = [ap + 0] + 71210, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = 0, ap++;
[ap + 0] = 223925651276572801467025322450506123433664924558092583619131301620304795732, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
[ap + -37] = [[fp + -5] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 6], ap++;
jmp rel 51 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1726174191690532102239220134128269510058468368915684357012677746433971404949, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -5] + 7];
[ap + -4] = [[fp + -5] + 8];
[ap + -3] = [[fp + -5] + 9];
[ap + -2] = [[fp + -5] + 10];
[ap + -34] = [[fp + -5] + 11];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5] + 7) %}
[ap + 0] = [[fp + -5] + 13], ap++;
jmp rel 28 if [ap + -1] != 0;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = [fp + -5] + 14, ap++;
[ap + 0] = [ap + -27], ap++;
call rel 400;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
jmp rel 16;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [[fp + -5] + 12], ap++;
[ap + 0] = [fp + -5] + 16, ap++;
[ap + 0] = [[fp + -5] + 14], ap++;
[ap + 0] = [[fp + -5] + 15], ap++;
jmp rel 8;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[fp + -5] + 5], ap++;
[ap + 0] = [fp + -5] + 9, ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [[fp + -5] + 8], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -44], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -12] + 3, ap++;
jmp rel 5;
ap += 6;
[ap + 0] = [ap + -12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492915, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -37], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -12] + 3, ap++;
jmp rel 5;
ap += 6;
[ap + 0] = [ap + -12], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492914, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -26], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = [ap + -14] + 3, ap++;
jmp rel 5;
ap += 8;
[ap + 0] = [ap + -14], ap++;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 485748461484230571791265682659113160264223489397539653310998840191492913, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -19], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = 1270 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768210186, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 140;
[fp + -6] = [ap + 0] + 1270, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 16;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 2309;
[ap + 0] = [ap + -1] + 2308, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 12910 <= memory[ap + -7] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -8] = [ap + 0] + 12910, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 87;
[ap + -8] = [ap + 0] + 12910, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = 0, ap++;
[ap + 0] = 223925651276572801467025322450506123433664924558092583619131301620304795732, ap++;
[ap + 0] = [ap + -10] + 1, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -5] + 0];
[ap + -5] = [[fp + -5] + 1];
[ap + -4] = [[fp + -5] + 2];
[ap + -3] = [[fp + -5] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -5]) %}
[ap + 0] = [[fp + -5] + 5], ap++;
jmp rel 55 if [ap + -1] != 0;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 7, ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -10] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -12] + 1], ap++;
[ap + -5] = [[ap + -13] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 21 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -7] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -8] + 1];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + -6] = [[ap + -1] + 0];
[ap + 0] = [ap + -9] + 2, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7269940625183576940180048306939577043858226, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
jmp rel 8;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[fp + -5] + 4], ap++;
[ap + 0] = [fp + -5] + 8, ap++;
[ap + 0] = [[fp + -5] + 6], ap++;
[ap + 0] = [[fp + -5] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = 1270 <= memory[fp + -6] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -6] + 340282366920938463463374607431768210186, ap++;
[ap + -1] = [[fp + -7] + 0];
jmp rel 84;
[fp + -6] = [ap + 0] + 1270, ap++;
[ap + -1] = [[fp + -7] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[fp + -3] = [ap + 0] + [fp + -4], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 16;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7733229381460288120802334208475838166080759535023995805565484692595, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
call rel 2149;
[ap + 0] = [ap + -1] + 2148, ap++;
[ap + 0] = [[ap + -1] + 0], ap++;
%{ memory[ap + 0] = 87270 <= memory[ap + -7] %}
jmp rel 9 if [ap + 0] != 0, ap++;
[ap + -8] = [ap + 0] + 87270, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 0];
jmp rel 31;
[ap + -8] = [ap + 0] + 87270, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -5], ap++;
call rel 226;
jmp rel 12 if [ap + -3] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -11] + 1, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1014900818724271728842439076957192829503821588950108430443072887165436450886, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -5] = [[fp + -4] + 1];
[ap + -4] = [[fp + -4] + 2];
[ap + -3] = [[fp + -4] + 3];
[ap + -2] = [[fp + -4] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4]) %}
[ap + 0] = [[fp + -4] + 6], ap++;
jmp rel 149 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 1239149872729906871793169171313897310809028090219849129902089947133222824240, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -4] + 7];
[ap + -4] = [[fp + -4] + 8];
[ap + -3] = [[fp + -4] + 9];
[ap + -2] = [[fp + -4] + 10];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -4] + 7) %}
[ap + 0] = [[fp + -4] + 12], ap++;
jmp rel 119 if [ap + -1] != 0;
[ap + 0] = [[fp + -4] + 13], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 14, ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -6] + 0], ap++;
[ap + -4] = [[fp + -6] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -6] + 2];
jmp rel 85;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -6] + 0], ap++;
[ap + -3] = [[fp + -6] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -6] + 2];
[ap + 0] = 0, ap++;
[ap + 0] = 1239149872729906871793169171313897310809028090219849129902089947133222824240, ap++;
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -11] = [[ap + -10] + 1];
[ap + -4] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
[fp + -3] = [[ap + -10] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 6], ap++;
jmp rel 50 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [fp + -3], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 477;
[ap + 0] = [[ap + -28] + 5], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -30] + 7];
[ap + -2] = [[ap + -30] + 8];
[ap + -6] = [[ap + -30] + 9];
[ap + -5] = [[ap + -30] + 10];
[ap + -4] = [[ap + -30] + 11];
[ap + -3] = [[ap + -30] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -30] + 7) %}
[ap + 0] = [[ap + -30] + 14], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [[ap + -32] + 13], ap++;
[ap + 0] = [ap + -33] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [[ap + -32] + 13], ap++;
[ap + 0] = [ap + -33] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -35] + 15], ap++;
[ap + 0] = [[ap + -36] + 16], ap++;
ret;
ap += 20;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [[ap + -32] + 5], ap++;
[ap + 0] = [ap + -33] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -35] + 7], ap++;
[ap + 0] = [[ap + -36] + 8], ap++;
ret;
ap += 17;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1749165063169615148890104124711417950509560691, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -6] + 3, ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -28], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
jmp rel 10;
ap += 28;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [[fp + -4] + 11], ap++;
[ap + 0] = [fp + -4] + 15, ap++;
[ap + 0] = [[fp + -4] + 13], ap++;
[ap + 0] = [[fp + -4] + 14], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 38;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [[fp + -4] + 5], ap++;
[ap + 0] = [fp + -4] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[fp + -4] + 7], ap++;
[ap + 0] = [[fp + -4] + 8], ap++;
ret;
ap += 5;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
call rel 421;
jmp rel 374 if [ap + -3] != 0;
[ap + 0] = 0, ap++;
[ap + 0] = 1726174191690532102239220134128269510058468368915684357012677746433971404949, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[ap + -7] + 0];
[ap + -8] = [[ap + -7] + 1];
[ap + -3] = [[ap + -7] + 2];
[ap + -2] = [[ap + -7] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -7]) %}
[ap + 0] = [[ap + -7] + 5], ap++;
jmp rel 347 if [ap + -1] != 0;
[ap + 0] = [[ap + -8] + 6], ap++;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [ap + -10] + 7, ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -17] + 0], ap++;
[ap + -4] = [[ap + -18] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[ap + -19] + 2];
jmp rel 315;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -16] + 0], ap++;
[ap + -3] = [[ap + -17] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[ap + -18] + 2];
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1153431758152617002674809172345379817267606445825896141478041208762844152223, ap++;
[ap + 0] = [ap + -20] + 3, ap++;
[ap + 0] = 20853273475220472486191784820, ap++;
[ap + -1] = [[ap + -10] + 0];
[ap + -11] = [[ap + -10] + 1];
[ap + -12] = [[ap + -10] + 2];
[ap + -3] = [[ap + -10] + 3];
[ap + -4] = [[ap + -10] + 4];
[ap + -4] = [[ap + -10] + 5];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -10]) %}
[ap + 0] = [[ap + -10] + 7], ap++;
jmp rel 275 if [ap + -1] != 0;
[ap + 0] = [[ap + -11] + 8], ap++;
[ap + 0] = [[ap + -12] + 9], ap++;
[ap + 0] = [[ap + -13] + 6], ap++;
[fp + 4] = [ap + -14] + 10;
[ap + -2] = [ap + 0] + [ap + -3], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 253;
[ap + 0] = [[ap + -4] + 0], ap++;
jmp rel 6 if [ap + -1] != 0;
[ap + 0] = 1, ap++;
jmp rel 4;
[ap + 0] = 0, ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
[ap + 0] = 1, ap++;
[ap + -1] = [ap + 0] + [ap + -2], ap++;
jmp rel 66 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = [ap + -14], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 110214484730362525640047350879009947356640834057829, ap++;
[ap + 0] = 21, ap++;
call rel 464;
jmp rel 41 if [ap + -5] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1997209042069643135709344952807065910992472029923670688473712229447419591075, ap++;
[ap + -1] = [[ap + -2] + 0];
[fp + 0] = [ap + -6];
[fp + 1] = [ap + -5];
[fp + 2] = [ap + -4];
[fp + 3] = [ap + -3];
[fp + 1] = [ap + 0] + [fp + 0], ap++;
[ap + -1] = [[ap + -3] + 1];
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -133], ap++;
[ap + 0] = [fp + 0], ap++;
[ap + 0] = [fp + 1], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8] + 2, ap++;
call rel 1578;
jmp rel 9 if [ap + -3] != 0;
[fp + 2] = [[ap + -1] + 0];
[fp + 3] = [[ap + -1] + 1];
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2] + 2, ap++;
jmp rel 4;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -130], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 223925651276572801467025322450506123433664924558092583619131301620304795732, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + 4] + 0];
[ap + -11] = [[fp + 4] + 1];
[ap + -3] = [[fp + 4] + 2];
[ap + -2] = [[fp + 4] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + 4]) %}
[ap + 0] = [[fp + 4] + 5], ap++;
jmp rel 145 if [ap + -1] != 0;
[ap + 0] = [[fp + 4] + 6], ap++;
[ap + 0] = [[fp + 4] + 4], ap++;
[ap + 0] = [fp + 4] + 7, ap++;
%{ memory[ap + 0] = (memory[ap + -3] + 0) % PRIME < 4294967296 %}
jmp rel 18 if [ap + 0] != 0, ap++;
[ap + -4] = [ap + 0] + 4294967296, ap++;
%{
(value, scalar) = (memory[ap + -1], 10633823966279327296825105735305134080)
x = min(value // scalar, 340282366920938463463374607431768211454)
y = value - x * scalar
memory[ap + 0] = x
memory[ap + 1] = y
%}
[ap + 2] = [ap + 0] * 10633823966279327296825105735305134080, ap++;
[ap + -2] = [ap + 1] + [ap + 0], ap++;
[ap + -1] = [[ap + -24] + 0], ap++;
[ap + 0] = [ap + -2] + 319014718988379808869724395965452910591, ap++;
[ap + -1] = [[ap + -26] + 1], ap++;
[ap + -5] = [[ap + -27] + 2];
[ap + -5] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 111 if [ap + -1] != 0;
[fp + -1] = [fp + -1] + 1;
[ap + -4] = [[ap + -21] + 0];
[ap + 0] = [ap + -4] + 340282366920938463463374607427473244160, ap++;
[ap + -1] = [[ap + -22] + 1];
[ap + 0] = 1, ap++;
%{ memory[ap + 0] = (memory[ap + -6] + memory[ap + -1]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [ap + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -26] + 2];
jmp rel 80;
[ap + 1] = [ap + -7] + [ap + -2], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -26] + 2];
[ap + 0] = 0, ap++;
[ap + 0] = 223925651276572801467025322450506123433664924558092583619131301620304795732, ap++;
[ap + 0] = [ap + -28] + 3, ap++;
[ap + 0] = 25828017502874050592466629733, ap++;
[ap + -1] = [[ap + -11] + 0];
[ap + -12] = [[ap + -11] + 1];
[ap + -4] = [[ap + -11] + 2];
[ap + -3] = [[ap + -11] + 3];
[ap + -5] = [[ap + -11] + 4];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -11]) %}
[ap + 0] = [[ap + -11] + 6], ap++;
jmp rel 51 if [ap + -1] != 0;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -8], ap++;
call rel 149;
[ap + 0] = [[ap + -29] + 5], ap++;
[ap + 0] = 1280709301550335749748, ap++;
[ap + -1] = [[ap + -31] + 7];
[ap + -2] = [[ap + -31] + 8];
[ap + -6] = [[ap + -31] + 9];
[ap + -5] = [[ap + -31] + 10];
[ap + -4] = [[ap + -31] + 11];
[ap + -3] = [[ap + -31] + 12];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -31] + 7) %}
[ap + 0] = [[ap + -31] + 14], ap++;
jmp rel 13 if [ap + -1] != 0;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [[ap + -33] + 13], ap++;
[ap + 0] = [ap + -34] + 15, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
[ap + 0] = [ap + -23], ap++;
[ap + 0] = [[ap + -33] + 13], ap++;
[ap + 0] = [ap + -34] + 17, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -36] + 15], ap++;
[ap + 0] = [[ap + -37] + 16], ap++;
ret;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [[ap + -13] + 5], ap++;
[ap + 0] = [ap + -14] + 9, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -16] + 7], ap++;
[ap + 0] = [[ap + -17] + 8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -28] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7269940625183576940180048306939577043858226, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -29] + 3, ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
jmp rel 8;
[ap + 0] = [ap + -17], ap++;
[ap + 0] = [[fp + 4] + 4], ap++;
[ap + 0] = [fp + 4] + 8, ap++;
[ap + 0] = [[fp + 4] + 6], ap++;
[ap + 0] = [[fp + 4] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 7891998437966260601762371672023996916393715052535837300, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [fp + 4], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
jmp rel 9;
ap += 6;
[ap + 0] = [[ap + -17] + 6], ap++;
[ap + 0] = [ap + -18] + 10, ap++;
[ap + 0] = [[ap + -19] + 8], ap++;
[ap + 0] = [[ap + -20] + 9], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1749165063169615148890104124711417950509560691, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -21] + 3, ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -11], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
jmp rel 8;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [ap + -10] + 8, ap++;
[ap + 0] = [[ap + -11] + 6], ap++;
[ap + 0] = [[ap + -12] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
jmp rel 13 if [fp + -10] != 0;
[ap + 0] = 373502242078911797297509776863854163679541038429883461174855360031674187824, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -7] = [[fp + -3] + 0];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
ret;
jmp rel 13 if [fp + -9] != 0;
[ap + 0] = 553132481214675521502977957974509639062080100631756862105218886163371506175, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -5] + 1];
[fp + -7] = [[fp + -5] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = 1081328092001983627049499256119332660943014795026490716554494543777654115287, ap++;
[ap + -1] = [[fp + -5] + 0];
[fp + -8] = [[fp + -5] + 1];
[fp + -7] = [[fp + -5] + 2];
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
[ap + 0] = 0, ap++;
[ap + 0] = 1239149872729906871793169171313897310809028090219849129902089947133222824240, ap++;
[ap + 0] = 100890693370601760042082660, ap++;
[ap + -1] = [[fp + -3] + 0];
[fp + -4] = [[fp + -3] + 1];
[ap + -3] = [[fp + -3] + 2];
[ap + -2] = [[fp + -3] + 3];
%{ syscall_handler.syscall(syscall_ptr=memory[fp + -3]) %}
[ap + 0] = [[fp + -3] + 5], ap++;
jmp rel 116 if [ap + -1] != 0;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -3] + 7, ap++;
%{ memory[ap + 4] = memory[ap + -3] < 3618502788666131106986593281521497120414687020801267626233049500247285301248 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -4] = [ap + 4] + 3618502788666131106986593281521497120414687020801267626233049500247285301248, ap++;
%{
(value, scalar) = (memory[ap + 3], 313594649253062377472)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 313594649253062377472, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[fp + -5] + 0], ap++;
[ap + -4] = [[fp + -5] + 1], ap++;
[ap + -3] = [ap + -5] + 340282366920938463149779958178705833983;
[ap + -3] = [[fp + -5] + 2];
jmp rel 82;
%{
(value, scalar) = (memory[ap + -4], 10633823966279326983230456482242756608)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 10633823966279326983230456482242756608, ap++;
[ap + -5] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[fp + -5] + 0], ap++;
[ap + -3] = [[fp + -5] + 1], ap++;
[ap + -2] = [ap + -4] + 329648542954659136480144150949525454848;
[ap + -2] = [[fp + -5] + 2];
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = 94901967946959054011942058057773508207, ap++;
[ap + -1] = [[ap + -8] + 0];
[ap + -9] = [[ap + -8] + 1];
%{ syscall_handler.syscall(syscall_ptr=memory[ap + -8]) %}
[ap + 0] = [[ap + -8] + 3], ap++;
jmp rel 54 if [ap + -1] != 0;
[ap + 0] = [[ap + -9] + 4], ap++;
[ap + 0] = [[ap + -1] + 2], ap++;
[ap + 0] = [[ap + -11] + 2], ap++;
[ap + 0] = [ap + -12] + 5, ap++;
jmp rel 18 if [ap + -3] != 0;
ap += 1;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 108276386368279756156895986548135666721740477349885388767196019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
[ap + -3] = [ap + 0] + [ap + -15], ap++;
jmp rel 14 if [ap + -1] != 0;
ap += 2;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 6453775547044262656980513251389146108192067417835201906, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 7;
[ap + 0] = [ap + -10], ap++;
[ap + 0] = [[ap + -17] + 2], ap++;
[ap + 0] = [ap + -18] + 6, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [[ap + -20] + 4], ap++;
[ap + 0] = [[ap + -21] + 5], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 1749165063169615148890104124711417950509560691, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -5] + 3, ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
jmp rel 10;
ap += 13;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [[fp + -3] + 4], ap++;
[ap + 0] = [fp + -3] + 8, ap++;
[ap + 0] = [[fp + -3] + 6], ap++;
[ap + 0] = [[fp + -3] + 7], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
[fp + -3] = [ap + 0] + 0, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 1122;
%{ memory[ap + 0] = (memory[fp + -5] + memory[fp + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[fp + -9] + 0];
jmp rel 1095;
[ap + 1] = [fp + -5] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[fp + -9] + 0];
[ap + 0] = 31, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[fp + -9] + 1];
jmp rel 939;
[ap + -1] = [[fp + -9] + 1];
[ap + 0] = [fp + -9] + 2, ap++;
[ap + -5] = [ap + 0] + 31, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 791;
[ap + 0] = 31, ap++;
[ap + -7] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 762;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = [ap + -5] + 1, ap++;
[ap + -2] = [ap + 0] + 16, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 555;
[ap + 0] = 16, ap++;
[ap + -4] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 269;
[ap + -1] = [[ap + -5] + 0];
ap += 15;
%{ memory[ap + 0] = memory[fp + -4] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -21] + 1], ap++;
[ap + 3] = [[ap + -22] + 2], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -4] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -26] + 3];
jmp rel 14 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -4] = [[ap + -21] + 1];
ap += 5;
[ap + 0] = [ap + -26] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -26] + 4, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 16, ap++;
[ap + -31] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 198;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = [ap + -6] + 1, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 1083;
jmp rel 183 if [ap + -3] != 0;
jmp rel 15 if [ap + -1] != 0;
ap += 42;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 187;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[ap + -18], memory[ap + -1]) %}
[ap + 5] = [[ap + -4] + 0], ap++;
[ap + 5] = [[ap + -5] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -8] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -11] + 3];
[ap + -3] = [ap + -8] * [ap + -2];
[ap + -25] = [ap + -3] + [ap + -1];
[ap + 0] = 31, ap++;
[ap + -1] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 4];
jmp rel 127;
[ap + -1] = [[ap + -14] + 4];
[ap + 0] = [ap + -4] * 340282366920938463463374607431768211456, ap++;
[ap + 0] = 16, ap++;
[ap + 0] = [ap + -2] + [ap + -31], ap++;
[ap + -4] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -20] + 5];
jmp rel 47;
[ap + -1] = [[ap + -19] + 5];
[ap + 0] = 16, ap++;
[ap + -7] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -23] + 6];
jmp rel 22;
[ap + -1] = [[ap + -22] + 6];
[ap + 0] = [ap + -22] + 7, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 1008;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 34;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 80;
ap += 23;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -48] + 7, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 66;
ap += 2;
[ap + 0] = [ap + -22] + 6, ap++;
[ap + 0] = [ap + -10], ap++;
call rel 973;
jmp rel 52 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] * [ap + -1], ap++;
[ap + 0] = [ap + -30] + [ap + -1], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -10] + 2];
jmp rel 22;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -9] + 2];
ap += 1;
[ap + -7] = [[fp + -7] + 0];
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -33], ap++;
[ap + 0] = [fp + -5], ap++;
jmp rel 269;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 42;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 35;
ap += 31;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -48] + 5, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 21;
ap += 44;
[ap + 0] = [ap + -48], ap++;
[ap + 0] = [ap + -47], ap++;
[ap + 0] = [ap + -47], ap++;
jmp rel 14;
ap += 55;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -64] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
%{ memory[ap + 0] = memory[fp + -4] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -7] + 1], ap++;
[ap + 3] = [[ap + -8] + 2], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -4] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -12] + 3];
jmp rel 14 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -4] = [[ap + -7] + 1];
ap += 5;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -12] + 4, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -17], ap++;
call rel 831;
jmp rel 221 if [ap + -3] != 0;
jmp rel 15 if [ap + -1] != 0;
ap += 59;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 211;
%{ (memory[ap + 5], memory[ap + 6]) = divmod(memory[ap + -16], memory[ap + -1]) %}
[ap + 5] = [[ap + -4] + 0], ap++;
[ap + 5] = [[ap + -5] + 1], ap++;
[ap + -2] = [ap + 4] + 1, ap++;
[ap + -4] = [ap + -2] + [ap + -3], ap++;
[ap + -3] = [[ap + -8] + 2], ap++;
%{ memory[ap + -3] = memory[ap + 0] < 18446744073709551616 %}
jmp rel 6 if [ap + -3] != 0, ap++;
[ap + -3] = [ap + -7] + 340282366920938463444927863358058659840, ap++;
jmp rel 4;
[ap + -3] = [ap + -1] + 340282366920938463444927863358058659840, ap++;
[ap + -4] = [[ap + -11] + 3];
[ap + -3] = [ap + -8] * [ap + -2];
[ap + -23] = [ap + -3] + [ap + -1];
[ap + 0] = 16, ap++;
[ap + -1] = [ap + 1] + [ap + -38], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -15] + 4];
jmp rel 165;
[ap + -1] = [[ap + -14] + 4];
[ap + 0] = [ap + -14] + 5, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 781;
jmp rel 150 if [ap + -3] != 0;
[ap + 0] = 31, ap++;
[ap + -1] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -8] + 0];
jmp rel 126;
[ap + -1] = [[ap + -7] + 0];
[ap + 0] = [ap + -42] * [ap + -4], ap++;
[ap + 0] = 16, ap++;
[ap + 0] = [ap + -2] + [ap + -24], ap++;
[ap + -4] = [ap + 1] + [ap + -2], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 1];
jmp rel 47;
[ap + -1] = [[ap + -12] + 1];
[ap + 0] = 16, ap++;
[ap + -7] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -16] + 2];
jmp rel 22;
[ap + -1] = [[ap + -15] + 2];
[ap + 0] = [ap + -15] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 739;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 34;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 80;
ap += 23;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -41] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 66;
ap += 2;
[ap + 0] = [ap + -15] + 2, ap++;
[ap + 0] = [ap + -10], ap++;
call rel 704;
jmp rel 52 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] * [ap + -1], ap++;
[ap + 0] = [ap + -23] + [ap + -1], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -10] + 2];
jmp rel 22;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -9] + 2];
ap += 1;
[ap + -7] = [[fp + -7] + 0];
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -56], ap++;
[ap + 0] = [fp + -5], ap++;
jmp rel 220;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 49;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 42;
ap += 31;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -41] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 28;
ap += 37;
[ap + 0] = [ap + -41], ap++;
[ap + 0] = [ap + -40], ap++;
[ap + 0] = [ap + -40], ap++;
jmp rel 21;
ap += 48;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -65] + 5, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 7;
ap += 61;
[ap + 0] = [ap + -65], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -64], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 44;
%{ memory[ap + 0] = memory[fp + -4] < 340282366920938463463374607431768211456 %}
jmp rel 22 if [ap + 0] != 0, ap++;
%{ (memory[ap + 3], memory[ap + 4]) = divmod(memory[fp + -4], 340282366920938463463374607431768211456) %}
[ap + 3] = [[ap + -47] + 0], ap++;
[ap + 3] = [[ap + -48] + 1], ap++;
[ap + -2] = [ap + 1] * 340282366920938463463374607431768211456, ap++;
[fp + -4] = [ap + -3] + [ap + 1], ap++;
[ap + -3] = [ap + -1] + -10633823966279327296825105735305134080, ap++;
jmp rel 6 if [ap + -4] != 0;
[ap + -3] = [ap + -1] + 340282366920938463463374607431768211455;
jmp rel 4;
[ap + -3] = [ap + -2] + 329648542954659136166549501696463077376;
[ap + -3] = [[ap + -52] + 2];
jmp rel 14 if [ap + -2] != 0;
[fp + -1] = [fp + -1] + 1;
[fp + -4] = [[ap + -47] + 0];
ap += 5;
[ap + 0] = [ap + -52] + 1, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = 0, ap++;
jmp rel 6;
[ap + 0] = [ap + -52] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = 31, ap++;
[ap + -1] = [ap + 1] + [fp + -5], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -7] + 0];
jmp rel 130;
[ap + -1] = [[ap + -6] + 0];
[ap + 0] = 16, ap++;
[ap + -2] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -10] + 1];
jmp rel 47;
[ap + -1] = [[ap + -9] + 1];
[ap + 0] = 16, ap++;
[ap + -5] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -13] + 2];
jmp rel 22;
[ap + -1] = [[ap + -12] + 2];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 519;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 34;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 86;
ap += 23;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -38] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 72;
ap += 2;
[ap + 0] = [ap + -12] + 2, ap++;
[ap + 0] = [ap + -8], ap++;
call rel 484;
jmp rel 58 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] * [ap + -1], ap++;
[ap + 0] = [ap + -27] + [ap + -1], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -10] + 2];
jmp rel 28;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -9] + 2];
ap += 1;
[ap + -7] = [[fp + -7] + 0];
[ap + 0] = [ap + -10] + 3, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = [ap + -38], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -99], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 21;
ap += 12;
[ap + 0] = [ap + -16], ap++;
[ap + 0] = [ap + -15], ap++;
[ap + 0] = [ap + -15], ap++;
jmp rel 14;
ap += 29;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -38] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 90;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -98] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 64;
[ap + 0] = 16, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -70] + 0];
jmp rel 47;
[ap + -1] = [[ap + -69] + 0];
[ap + 0] = 16, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -73] + 1];
jmp rel 22;
[ap + -1] = [[ap + -72] + 1];
[ap + 0] = [ap + -72] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 349;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 34;
ap += 9;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
jmp rel 88;
ap += 20;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -95] + 2, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 74;
ap += 2;
[ap + 0] = [ap + -72] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
call rel 314;
jmp rel 60 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = [fp + -6] * [ap + -1], ap++;
[ap + 0] = [fp + -4] + [ap + -1], ap++;
%{ memory[ap + 4] = memory[ap + -1] < 452312848583266388373324160190187140051835877600158453279131187530910662656 %}
jmp rel 14 if [ap + 4] != 0, ap++;
[ap + -2] = [ap + 4] + 452312848583266388373324160190187140051835877600158453279131187530910662656, ap++;
%{
(value, scalar) = (memory[ap + 3], 9304595970494411423921298675024789504)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -2] = x
memory[ap + -1] = y
%}
[ap + 0] = [ap + -2] * 9304595970494411423921298675024789504, ap++;
[ap + 2] = [ap + -1] + [ap + -2], ap++;
[ap + -4] = [[ap + -8] + 0], ap++;
[ap + -4] = [[ap + -9] + 1], ap++;
[ap + -3] = [ap + -5] + 330977770950444052039453308756743421951;
[ap + -3] = [[ap + -10] + 2];
jmp rel 25;
%{
(value, scalar) = (memory[ap + -2], 1329227995784915872903807060280344576)
x = min(value // scalar, 340282366920938463463374607431768211455)
y = value - x * scalar
memory[ap + -1] = x
memory[ap + 0] = y
%}
[ap + 1] = [ap + -1] * 1329227995784915872903807060280344576, ap++;
[ap + -3] = [ap + 0] + [ap + -1], ap++;
[ap + -3] = [[ap + -7] + 0], ap++;
[ap + -3] = [[ap + -8] + 1], ap++;
[ap + -2] = [ap + -4] + 338953138925153547590470800371487866880;
[ap + -2] = [[ap + -9] + 2];
ap += 3;
[ap + -9] = [[fp + -7] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 29721761890975875353235833581453094220424382983267374, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -12] + 3, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 9;
[ap + 0] = [ap + -13], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -12], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 68;
[ap + 0] = [fp + -9] + 2, ap++;
[fp + -5] = [ap + 0] + 0, ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 124;
[ap + 0] = 16, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -6] + 0];
jmp rel 47;
[ap + -1] = [[ap + -5] + 0];
[ap + 0] = 16, ap++;
[fp + -3] = [ap + 1] + [ap + -1], ap++;
%{ memory[ap + -1] = memory[ap + 0] < 4294967296 %}
jmp rel 7 if [ap + -1] != 0, ap++;
[ap + 0] = [ap + -1] + 340282366920938463463374607431768211456, ap++;
[ap + -1] = [[ap + -9] + 1];
jmp rel 22;
[ap + -1] = [[ap + -8] + 1];
[ap + 0] = [ap + -8] + 2, ap++;
[ap + 0] = [ap + -2], ap++;
call rel 202;
jmp rel 7 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2] * 340282366920938463463374607431768211456, ap++;
jmp rel 34;
ap += 4;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
jmp rel 73;
ap += 15;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504329508738615720351733824384887, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -26] + 2, ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = [ap + -4] + 1, ap++;
jmp rel 59;
ap += 2;
[ap + 0] = [ap + -8] + 1, ap++;
[ap + 0] = [fp + -3], ap++;
call rel 167;
jmp rel 45 if [ap + -3] != 0;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -2], ap++;
%{ memory[ap + 0] = (memory[fp + -5] + memory[fp + -3]) % PRIME < 4294967296 %}
jmp rel 8 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -5] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 4294967296, ap++;
[ap + -1] = [[ap + -5] + 0];
jmp rel 18;
[ap + 1] = [fp + -5] + [fp + -3], ap++;
[ap + -1] = [ap + 0] + 340282366920938463463374607427473244160, ap++;
[ap + -2] = [[ap + -5] + 0];
ap += 1;
[ap + 0] = [fp + -6] * [ap + -5], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4] + [ap + -5], ap++;
[ap + 0] = [ap + -8], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [ap + -7] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 4;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -3], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -6], ap++;
ret;
ap += 27;
[ap + 0] = [ap + -29], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
ap += 99;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 155785504323917466144735657540098748279, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -9] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -7] + 1, ap++;
ret;
ap += 104;
[ap + 0] = [fp + -9], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -8], ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
ret;
%{ memory[ap + 0] = 2270 <= memory[fp + -7] %}
jmp rel 7 if [ap + 0] != 0, ap++;
[ap + 0] = [fp + -7] + 340282366920938463463374607431768209186, ap++;
[ap + -1] = [[fp + -8] + 0];
jmp rel 47;
[fp + -7] = [ap + 0] + 2270, ap++;
[ap + -1] = [[fp + -8] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[fp + -5] = [ap + 0] + [fp + -6], ap++;
jmp rel 4 if [ap + -1] != 0;
jmp rel 10;
[ap + 0] = [fp + -6] + 1, ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -6], ap++;
jmp rel 8;
[ap + 0] = [fp + -6], ap++;
[ap + 0] = [fp + -5], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = 0, ap++;
jmp rel 14 if [ap + -2] != 0;
[ap + 0] = [[ap + -1] + 0], ap++;
[ap + -1] = [[fp + -3] + 0];
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -9], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [ap + -7], ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3] + 1, ap++;
call rel -42;
ret;
[ap + 0] = [ap + -6], ap++;
[ap + 0] = [ap + -8], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [fp + -4], ap++;
[ap + 0] = [fp + -3], ap++;
ret;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 375233589013918064796019, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -8] + 1, ap++;
[ap + 0] = [fp + -7], ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -5], ap++;
[ap + 0] = [ap + -6] + 1, ap++;
ret;
%{ memory[ap + 0] = memory[fp + -3] < 16 %}
jmp rel 7 if [ap + 0] != 0, ap++;
[fp + -3] = [ap + 0] + 16, ap++;
[ap + -1] = [[fp + -4] + 0];
jmp rel 111;
[ap + 0] = [fp + -3] + 340282366920938463463374607431768211440, ap++;
[ap + -1] = [[fp + -4] + 0];
[fp + -3] = [ap + 0] + 1809251394333065606848661391547535052811553607665798349986546028067936010256, ap++;
[ap + 0] = [ap + -1] * -2, ap++;
[ap + 0] = [fp + -4] + 1, ap++;
jmp rel [ap + -2];
jmp rel 90;
jmp rel 84;
jmp rel 78;
jmp rel 72;
jmp rel 66;
jmp rel 60;
jmp rel 54;
jmp rel 48;
jmp rel 42;
jmp rel 36;
jmp rel 30;
jmp rel 24;
jmp rel 18;
jmp rel 12;
jmp rel 6;
[ap + 0] = 1, ap++;
jmp rel 60;
[ap + 0] = 256, ap++;
jmp rel 56;
[ap + 0] = 65536, ap++;
jmp rel 52;
[ap + 0] = 16777216, ap++;
jmp rel 48;
[ap + 0] = 4294967296, ap++;
jmp rel 44;
[ap + 0] = 1099511627776, ap++;
jmp rel 40;
[ap + 0] = 281474976710656, ap++;
jmp rel 36;
[ap + 0] = 72057594037927936, ap++;
jmp rel 32;
[ap + 0] = 18446744073709551616, ap++;
jmp rel 28;
[ap + 0] = 4722366482869645213696, ap++;
jmp rel 24;
[ap + 0] = 1208925819614629174706176, ap++;
jmp rel 20;
[ap + 0] = 309485009821345068724781056, ap++;
jmp rel 16;
[ap + 0] = 79228162514264337593543950336, ap++;
jmp rel 12;
[ap + 0] = 20282409603651670423947251286016, ap++;
jmp rel 8;
[ap + 0] = 5192296858534827628530496329220096, ap++;
jmp rel 4;
[ap + 0] = 1329227995784915872903807060280344576, ap++;
[ap + 0] = [ap + -2], ap++;
[ap + 0] = 0, ap++;
[ap + 0] = 0, ap++;
[ap + 0] = [ap + -4], ap++;
ret;
ap += 2;
%{ memory[ap + 0] = segments.add() %}
ap += 1;
[ap + 0] = 573087285299505011920718992710461799, ap++;
[ap + -1] = [[ap + -2] + 0];
[ap + 0] = [fp + -4] + 1, ap++;
[ap + 0] = 1, ap++;
[ap + 0] = [ap + -4], ap++;
[ap + 0] = [ap + -5] + 1, ap++;
ret;
